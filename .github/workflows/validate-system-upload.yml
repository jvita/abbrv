name: Validate System Upload Files

on:
  issue_comment:
    types: [created]

jobs:
  validate-files:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request == null
    steps:
      - name: Print raw comment body
        run: |
          echo "Raw comment body:"
          echo "${{ github.event.comment.body }}"

      - name: Check if issue has 'system upload' label
        id: label_check
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.issue.labels.map(label => label.name);
            console.log("Labels: ", labels);
            core.setOutput('has_label', labels.includes('system upload'));

      - name: Exit if label not found
        if: steps.label_check.outputs.has_label != 'true'
        run: |
          echo "No 'system upload' label."
          exit 0

      - name: Extract attachment links from comment
        id: extract_urls
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body;
            const regex = /\[([^\]]+\.json)\]\((https:\/\/github\.com\/user-attachments\/[^\s)]+)\)/g;
            let match;
            const fileMap = {};

            while ((match = regex.exec(body)) !== null) {
              const filename = match[1];
              const url = match[2];
              console.log(`Found file: ${filename} -> ${url}`);
              fileMap[filename] = url;
            }

            const expectedFiles = ['glyphs.json', 'modes.json', 'rules.json', 'phrases.json'];
            for (const name of expectedFiles) {
              if (!fileMap[name]) {
                core.setFailed(`Missing expected file: ${name}`);
              } else {
                core.setOutput(name.replace('.json', ''), fileMap[name]);
              }
            }

      - name: Download files with Python
        run: |
          echo "Writing fetch script..."
          cat << 'EOF' > fetch_and_save.py
          import requests
          import os

          headers = {
              "Authorization": f"Bearer {os.environ.get('GITHUB_TOKEN')}",
              "Accept": "application/octet-stream"
          }

          file_urls = {
              "glyphs.json": os.environ.get("GLYPHS_URL"),
              "modes.json": os.environ.get("MODES_URL"),
              "rules.json": os.environ.get("RULES_URL"),
              "phrases.json": os.environ.get("PHRASES_URL"),
          }

          for filename, url in file_urls.items():
              if not url:
                  print(f"Missing URL for {filename}")
                  continue
              print(f"Downloading {filename} from {url}")
              response = requests.get(url, headers=headers, allow_redirects=True)
              if response.ok:
                  with open(filename, "wb") as f:
                      f.write(response.content)
                  print(f"Saved {filename}")
              else:
                  print(f"Failed to download {filename}: {response.status_code} {response.text}")
          EOF

          python fetch_and_save.py
        env:
          GLYPHS_URL: ${{ steps.extract_urls.outputs.glyphs }}
          MODES_URL: ${{ steps.extract_urls.outputs.modes }}
          RULES_URL: ${{ steps.extract_urls.outputs.rules }}
          PHRASES_URL: ${{ steps.extract_urls.outputs.phrases }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List downloaded files
        run: ls -lh *.json || echo "Files missing!"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r .github/scripts/requirements.txt || true

      - name: Run validation script
        run: python .github/scripts/validate_json.py glyphs.json modes.json rules.json phrases.json
