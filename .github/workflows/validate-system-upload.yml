name: Validate System Upload Files

on:
  issue_comment:
    types: [created]

jobs:
  validate-files:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request == null  # ensure it's an issue, not a PR
    steps:
      - name: Print raw comment body
        run: |
          echo "Raw comment body:"
          echo "${{ github.event.comment.body }}"

      - name: Check if issue has 'system upload' label
        id: label_check
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const labels = context.payload.issue.labels.map(label => label.name);
            console.log("Labels on issue #" + issue_number + ": " + labels.join(', '));
            core.setOutput('has_label', labels.includes('system upload'));

      - name: Exit if label not found
        if: steps.label_check.outputs.has_label != 'true'
        run: |
          echo "Issue does not have 'system upload' label. Exiting."
          exit 0

      - name: Extract file URLs from comment
        id: extract_urls
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body;
            const regex = /https:\/\/user-images\.githubusercontent\.com\/[^\s)"]+/g;
            const urls = body.match(regex) || [];
            console.log("Found URLs:", urls);

            const expectedFiles = ['glyphs.json', 'modes.json', 'rules.json', 'phrases.json'];
            const fileMap = {};

            for (const name of expectedFiles) {
              const match = urls.find(url => url.includes(name));
              if (match) {
                console.log(`Matched ${name}: ${match}`);
                fileMap[name] = match;
              } else {
                console.warn(`Missing file: ${name}`);
                core.setFailed(`Missing file: ${name}`);
              }
            }

            for (const [key, url] of Object.entries(fileMap)) {
              core.setOutput(key.replace('.json', ''), url);
            }

      - name: Download files
        run: |
          echo "Downloading files..."
          echo "glyphs.json URL: ${{ steps.extract_urls.outputs.glyphs }}"
          echo "modes.json URL:  ${{ steps.extract_urls.outputs.modes }}"
          echo "rules.json URL:  ${{ steps.extract_urls.outputs.rules }}"
          echo "phrases.json URL: ${{ steps.extract_urls.outputs.phrases }}"

          curl -L -o glyphs.json "${{ steps.extract_urls.outputs.glyphs }}"
          curl -L -o modes.json "${{ steps.extract_urls.outputs.modes }}"
          curl -L -o rules.json "${{ steps.extract_urls.outputs.rules }}"
          curl -L -o phrases.json "${{ steps.extract_urls.outputs.phrases }}"

      - name: List downloaded files
        run: ls -lh *.json || echo "Some files might be missing!"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          echo "Installing validation script dependencies..."
          pip install -r .github/scripts/requirements.txt || echo "No requirements file found."

      - name: Run validation script
        run: |
          echo "Running validation script..."
          python .github/scripts/validate_json.py
