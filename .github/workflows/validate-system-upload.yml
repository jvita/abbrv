name: Validate System Upload

on:
  issues:
    types: [opened]

jobs:
  validate-upload:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'system upload') &&
      (contains(github.event.issue.body, 'http') || contains(github.event.issue.body, 'base64'))

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Fetch issue body content
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "$ISSUE_BODY" > issue_body.txt

      - name: Extract File URLs or Base64 Data from Issue Body
        run: |
          ISSUE_BODY=$(cat issue_body.txt)
          FILE_URLS=$(echo "$ISSUE_BODY" | grep -oP 'https://github\.com/.+/files/.+\.[a-zA-Z0-9]+')

          if [[ -z "$FILE_URLS" ]]; then
            BASE64_FILES=$(echo "$ISSUE_BODY" | grep -Eo 'data:application/json;base64,[A-Za-z0-9+/=]+')
            if [[ -z "$BASE64_FILES" ]]; then
              echo "❌ No file URLs or base64-encoded files found in the issue body."
              exit 1
            fi
          fi
          echo $FILE_URLS
          echo "$FILE_URLS" > file_urls.txt
          echo "$BASE64_FILES" > base64_files.txt

      - name: Create json_files directory
        run: |
          mkdir -p json_files

      - name: Download JSON Files from URLs
        run: |
          ISSUE_BODY=$(cat issue_body.txt)

          # Extract URLs using the adjusted regex
          FILE_URLS=$(echo "$ISSUE_BODY" | grep -oP 'https://github\.com/.+/files/.+\.[a-zA-Z0-9]+')

          echo "Extracted File URLs:"
          echo "$FILE_URLS"

          # If no file URLs were found, check for base64-encoded data
          if [[ -z "$FILE_URLS" ]]; then
            BASE64_FILES=$(echo "$ISSUE_BODY" | grep -Eo 'data:application/json;base64,[A-Za-z0-9+/=]+')

            if [[ -z "$BASE64_FILES" ]]; then
              echo "❌ No file URLs or base64-encoded files found in the issue body."
              exit 1
            fi
          fi

          # Download the files and check content after downloading
          for FILE_URL in $FILE_URLS; do
            echo "Downloading $FILE_URL"
            FILE_NAME=$(basename "$FILE_URL")
            echo "Saving file as json_files/$FILE_NAME"
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "json_files/$FILE_NAME" "$FILE_URL"

            # Check the downloaded file contents
            echo "Contents of json_files/$FILE_NAME:"
            cat "json_files/$FILE_NAME"  # Print file contents for debugging
          done

          # List downloaded files for debugging
          ls -l json_files/

      - name: Validate JSON Files
        run: |
          ls -l json_files/

          head json_files/*.json

          python3 .github/scripts/validate_json.py json_files/*.json

      - name: Clean up
        run: |
          rm -f json_files/*.json

      - name: Post result to issue comment
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO="${{ github.repository }}"
          RESULT=$(cat result.txt)
          COMMENT_BODY="### Validation Results\n\n$RESULT"
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            "https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments"
