name: Validate System Upload from Gist

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  validate-gist:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'system upload')) ||
      (github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'system upload'))
    steps:
      - name: Print context info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue body:"
          echo "${{ github.event.issue.body }}"
          echo "Comment body:"
          echo "${{ github.event.comment.body }}"

      - name: Extract Gist link from issue or comment
        id: extract_gist
        uses: actions/github-script@v7
        with:
          script: |
            const isComment = context.eventName === 'issue_comment';
            const body = isComment ? context.payload.comment.body : context.payload.issue.body;
            const regex = /(https:\/\/gist\.github\.com\/[^\s)]+)/g;
            const match = regex.exec(body);

            if (!match) {
              core.setFailed("❌ No GitHub Gist link found.");
            } else {
              const url = match[1];
              console.log(`Found Gist URL: ${url}`);
              core.setOutput("gist_url", url);
            }

      - name: Install Python requests
        run: pip install requests

      - name: Download JSON files from Gist
        run: |
          echo "Downloading files from Gist..."
          cat << 'EOF' > download_from_gist.py
          import os
          import requests

          gist_url = os.environ["GIST_URL"]
          if gist_url.endswith("/"):
              gist_url = gist_url[:-1]
          gist_id = gist_url.split("/")[-1]

          api_url = f"https://api.github.com/gists/{gist_id}"
          print(f"Fetching Gist metadata from {api_url}...")

          r = requests.get(api_url)
          if r.status_code != 200:
              raise Exception(f"Failed to fetch Gist metadata: {r.status_code} {r.text}")

          data = r.json()
          files = data.get("files", {})

          required = ["glyphs.json", "modes.json", "rules.json", "phrases.json"]
          missing = [name for name in required if name not in files]
          if missing:
              raise Exception(f"Missing required files in Gist: {missing}")

          for name in required:
              raw_url = files[name]["raw_url"]
              print(f"Downloading {name} from {raw_url}")
              file_resp = requests.get(raw_url)
              if not file_resp.ok:
                  raise Exception(f"Failed to download {name}: {file_resp.status_code}")
              with open(name, "w", encoding="utf-8") as f:
                  f.write(file_resp.text)
              print(f"✅ Saved {name}")
          EOF

          python download_from_gist.py
        env:
          GIST_URL: ${{ steps.extract_gist.outputs.gist_url }}

      - name: List downloaded files
        run: ls -lh *.json

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run validation script
        run: python .github/scripts/validate_json.py .
