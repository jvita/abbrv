name: Validate System Upload (ZIP)

on:
  issue_comment:
    types: [created]

jobs:
  validate-zip:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request == null
    steps:
      - name: Print comment body
        run: |
          echo "Comment body:"
          echo "${{ github.event.comment.body }}"

      - name: Check for 'system upload' label
        id: label_check
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.issue.labels.map(label => label.name);
            console.log("Issue labels:", labels);
            core.setOutput('has_label', labels.includes('system upload'));

      - name: Exit if label not found
        if: steps.label_check.outputs.has_label != 'true'
        run: |
          echo "No 'system upload' label. Skipping."
          exit 0

      - name: Extract .zip attachment link from comment
        id: extract_zip
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body;
            const regex = /\[([^\]]+\.zip)\]\((https:\/\/github\.com\/user-attachments\/[^\s)]+)\)/g;
            const match = regex.exec(body);

            if (!match) {
              core.setFailed("❌ No .zip file link found in comment.");
            } else {
              const filename = match[1];
              const url = match[2];
              console.log(`Found zip: ${filename} -> ${url}`);
              core.setOutput("filename", filename);
              core.setOutput("url", url);
            }

      - name: Install Python dependencies
        run: pip install requests

      - name: Download and unzip attachment
        run: |
          echo "Downloading zip file: ${{ steps.extract_zip.outputs.filename }}"
          cat << 'EOF' > download_zip.py
          import os
          import requests

          url = os.environ["ZIP_URL"]
          filename = os.environ["ZIP_FILENAME"]

          print(f"Fetching redirect for {url}")
          head = requests.get(url, allow_redirects=False)
          redirect_url = head.headers.get("Location")

          if not redirect_url:
              raise Exception("❌ Could not resolve redirect URL.")

          print(f"Redirected to: {redirect_url}")
          r = requests.get(redirect_url)
          if r.ok:
              with open(filename, "wb") as f:
                  f.write(r.content)
              print(f"✅ Downloaded {filename}")
          else:
              raise Exception(f"❌ Failed to download: {r.status_code}")
          EOF

          python download_zip.py
          unzip -o "${{ steps.extract_zip.outputs.filename }}"

        env:
          ZIP_URL: ${{ steps.extract_zip.outputs.url }}
          ZIP_FILENAME: ${{ steps.extract_zip.outputs.filename }}

      - name: List extracted files
        run: ls -lh *.json || echo "⚠️ No .json files found!"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run validation script
        run: |
          echo "Running validation script..."
          python .github/scripts/validate_json.py glyphs.json modes.json rules.json phrases.json
