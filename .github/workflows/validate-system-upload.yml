name: Validate System Upload

on:
  issues:
    types: [opened]

jobs:
  validate-upload:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'system upload') &&
      (contains(github.event.issue.body, 'http') || contains(github.event.issue.body, 'base64'))
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Fetch issue body content
        run: |
          # Fetch the issue body content
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Print the raw issue body for debugging
          echo "Raw issue body content:"
          echo "$ISSUE_BODY"
          
          # Check if the issue body is empty
          if [ -z "$ISSUE_BODY" ]; then
            echo "❌ The issue body is empty."
            exit 1
          fi

      - name: Extract File URLs or Base64 Data from Issue Body
        run: |
          # Print the issue body content for further debugging
          echo "Issue body for extraction:"
          echo "$ISSUE_BODY"

          # Extract file URLs from the issue body (if present)
          FILE_URLS=$(echo "$ISSUE_BODY" | grep -Eo 'https://github\.com/.+/files/[a-zA-Z0-9_.-]+')
          
          # If no file URLs were found, check for base64-encoded data
          if [[ -z "$FILE_URLS" ]]; then
            echo "No file URLs found, checking for base64 files..."

            BASE64_FILES=$(echo "$ISSUE_BODY" | grep -Eo 'data:application/json;base64,[A-Za-z0-9+/=]+')
            
            if [[ -z "$BASE64_FILES" ]]; then
              echo "❌ No file URLs or base64-encoded files found in the issue body."
              exit 1
            fi
          fi

          echo "File URLs or base64-encoded files found:"
          echo "$FILE_URLS"
          echo "$BASE64_FILES"
          
          # Save the extracted data to files for further use
          echo "$FILE_URLS" > file_urls.txt
          echo "$BASE64_FILES" > base64_files.txt

      - name: Download and Validate JSON Files
        run: |
          # If URLs were found, download them
          if [[ -s file_urls.txt ]]; then
            for FILE_URL in $(cat file_urls.txt); do
              echo "Downloading $FILE_URL"
              curl -O "$FILE_URL"
            done
          fi

          # If base64-encoded files were found, decode them
          if [[ -s base64_files.txt ]]; then
            for BASE64_FILE in $(cat base64_files.txt); do
              FILE_NAME="decoded_file.json"
              echo "$BASE64_FILE" | cut -d ',' -f 2 | base64 --decode > "$FILE_NAME"
              echo "Decoded base64 file to $FILE_NAME"
            done
          fi

          # Now validate the JSON files (assuming you have the `validate_json.py` script set up)
          echo "Validating JSON files..."
          python3 validate_json.py *.json

      - name: Clean up
        run: |
          # Clean up downloaded and decoded files after validation
          rm -f *.json
