name: Submit Upload

on:
  issue_comment:
    types: [created]

jobs:
  submit-upload:
    if: |
      github.event.issue.pull_request == null &&
      contains(github.event.comment.body, '/submit-upload')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Gist link from second-to-last comment
        id: extract_gist
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                per_page: 100
              }
            );

            if (comments.length < 2) {
              core.setFailed("❌ Not enough comments to extract second-to-last comment.");
              return;
            }

            const body = comments[comments.length - 2].body;
            const regex = /(https:\/\/gist\.github\.com\/[^\s)]+)/g;
            const match = regex.exec(body);

            if (!match) {
              core.setFailed("❌ No GitHub Gist link found in the second-to-last comment.");
            } else {
              const url = match[1];
              console.log(`Found Gist URL: ${url}`);
              core.setOutput("gist_url", url);
            }

      - name: Install Python requests
        run: pip install requests

      - name: Download JSON files from Gist
        run: |
          echo "Downloading files from Gist..."
          cat << 'EOF' > download_from_gist.py
          import os
          import requests

          gist_url = os.environ["GIST_URL"]
          if gist_url.endswith("/"):
              gist_url = gist_url[:-1]
          gist_id = gist_url.split("/")[-1]

          api_url = f"https://api.github.com/gists/{gist_id}"
          print(f"Fetching Gist metadata from {api_url}...")

          r = requests.get(api_url)
          if r.status_code != 200:
              raise Exception(f"Failed to fetch Gist metadata: {r.status_code} {r.text}")

          data = r.json()
          files = data.get("files", {})

          required = ["glyphs.json", "modes.json", "rules.json", "phrases.json"]
          missing = [name for name in required if name not in files]
          if missing:
              raise Exception(f"Missing required files in Gist: {missing}")

          for name in required:
              raw_url = files[name]["raw_url"]
              print(f"Downloading {name} from {raw_url}")
              file_resp = requests.get(raw_url)
              if not file_resp.ok:
                  raise Exception(f"Failed to download {name}: {file_resp.status_code}")
              with open(name, "w", encoding="utf-8") as f:
                  f.write(file_resp.text)
              print(f"✅ Saved {name}")
          EOF

          python download_from_gist.py
        env:
          GIST_URL: ${{ steps.extract_gist.outputs.gist_url }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Add validated files from issue #${{ github.event.issue.number }}"
          title: "Add files from issue #${{ github.event.issue.number }}"
          body: |
            This PR was automatically generated from files submitted in issue #${{ github.event.issue.number }}.
          branch: add-files-from-issue-${{ github.event.issue.number }}
          base: main