name: Validate and Submit Upload

on:
  issue_comment:
    types: [created, edited]

jobs:
  validate-and-submit:
    if: |
      github.event.issue.pull_request == null &&
      contains(github.event.comment.body, '/submit')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python requests
        run: pip install requests

      - name: Extract Gist link and metadata
        id: extract_info
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body;
            const regex = /(https:\/\/gist\.github\.com\/[^\s)]+)/g;
            const match = regex.exec(body);

            if (!match) {
              core.setFailed("‚ùå No GitHub Gist link found in the comment.");
            } else {
              core.setOutput("gist_url", match[1]);
            }

            const issueBody = context.payload.issue.body;

            function extractSection(header) {
              const pattern = new RegExp(`###\\s+${header}\\s+([^#]+)`, 'i');
              const match = issueBody.match(pattern);
              if (!match) throw new Error(`‚ùå Section '${header}' not found in issue body.`);
              return match[1].trim();
            }

            const yourName = extractSection("Your name");
            const systemName = extractSection("System name").toLowerCase().replace(/[^a-z0-9-_]/g, '-');
            const systemDescription = extractSection("System description");

            core.setOutput("system_name", systemName);
            core.setOutput("your_name", yourName);
            core.setOutput("system_description", systemDescription);

      - name: Download JSON files and create metadata
        run: |
          echo "Downloading files from Gist..."
          mkdir -p "static/data/systems/${{ steps.extract_info.outputs.system_name }}"
          python - <<EOF
          import os
          import json
          import requests
          from datetime import datetime

          gist_url = os.environ["GIST_URL"]
          target_dir = os.environ["TARGET_DIR"]
          your_name = os.environ["YOUR_NAME"]
          system_description = os.environ["SYSTEM_DESCRIPTION"]

          if gist_url.endswith("/"):
              gist_url = gist_url[:-1]
          gist_id = gist_url.split("/")[-1]

          api_url = f"https://api.github.com/gists/{gist_id}"
          print(f"Fetching Gist metadata from {api_url}...")

          r = requests.get(api_url)
          if r.status_code != 200:
              raise Exception(f"Failed to fetch Gist metadata: {r.status_code} {r.text}")

          data = r.json()
          files = data.get("files", {})

          required = ["glyphs.json", "modes.json", "rules.json", "phrases.json"]
          missing = [name for name in required if name not in files]
          if missing:
              raise Exception(f"Missing required files in Gist: {missing}")

          os.makedirs(target_dir, exist_ok=True)

          for name in required:
              raw_url = files[name]["raw_url"]
              print(f"Downloading {name} from {raw_url}")
              file_resp = requests.get(raw_url)
              if not file_resp.ok:
                  raise Exception(f"Failed to download {name}: {file_resp.status_code}")
              with open(os.path.join(target_dir, name), "w", encoding="utf-8") as f:
                  f.write(file_resp.text)
              print(f"‚úÖ Saved {name} to {target_dir}")

          metadata = {
              "uploader": your_name,
              "description": system_description,
              "source_gist": gist_url,
              "gist_id": gist_id,
              "upload_date": datetime.utcnow().isoformat() + "Z"
          }
          with open(os.path.join(target_dir, "meta.json"), "w", encoding="utf-8") as meta_file:
              json.dump(metadata, meta_file, indent=2)
              print(f"‚úÖ Created meta.json in {target_dir}")
          EOF
        env:
          GIST_URL: ${{ steps.extract_info.outputs.gist_url }}
          TARGET_DIR: static/data/systems/${{ steps.extract_info.outputs.system_name }}
          YOUR_NAME: ${{ steps.extract_info.outputs.your_name }}
          SYSTEM_DESCRIPTION: ${{ steps.extract_info.outputs.system_description }}

      - name: Run validation script
        id: validate
        run: |
          python .github/scripts/validate_json.py "static/data/systems/${{ steps.extract_info.outputs.system_name }}" > validation_output.txt
          echo "exit_code=$?" >> "$GITHUB_OUTPUT"

      - name: Comment on issue with validation result
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('validation_output.txt', 'utf8');
            const issue_number = context.payload.issue.number;
            const statusEmoji = '${{ steps.validate.outputs.exit_code }}' === '0' ? '‚úÖ' : '‚ùå';
            const commentBody = [
              `### ${statusEmoji} Validation Results`,
              '',
              '```',
              output.trim(),
              '```'
            ].join('\n');

            github.rest.issues.createComment({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Check for existing PR from this issue
        id: check_pr
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const issueNumber = context.payload.issue.number;
            const match = `add-files-from-issue-${issueNumber}`;
            const existing = pulls.find(pr => pr.head.ref.includes(match));

            if (existing) {
              core.setOutput('exists', 'true');
              core.setOutput('branch', existing.head.ref);
              core.setOutput('url', existing.html_url);
              console.log(`PR already exists: ${existing.html_url}`);
            } else {
              const branchName = match + '-' + process.env.GITHUB_RUN_ID;
              core.setOutput('exists', 'false');
              core.setOutput('branch', branchName);
            }

      - name: Configure Git
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit files to existing or new branch
        if: success()
        run: |
          git checkout -B "${{ steps.check_pr.outputs.branch }}"
          git restore --staged .
          git add "static/data/systems/${{ steps.extract_info.outputs.system_name }}/*.json"
          git commit -m "Update validated files for '${{ steps.extract_info.outputs.system_name }}' from issue #${{ github.event.issue.number }}" || echo "No changes to commit"
          git push --force --set-upstream origin "${{ steps.check_pr.outputs.branch }}"

      - name: Create Pull Request (if not exists)
        id: create_pr
        if: steps.check_pr.outputs.exists == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Add validated files from issue #${{ github.event.issue.number }}"
          title: "Add files from issue #${{ github.event.issue.number }}"
          body: |
            This PR was automatically generated from files submitted in issue #${{ github.event.issue.number }}.
          branch: ${{ steps.check_pr.outputs.branch }}
          base: master

      - name: Comment with PR link
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const prUrl = '${{ steps.check_pr.outputs.exists }}' === 'true'
              ? '${{ steps.check_pr.outputs.url }}'
              : '${{ steps.create_pr.outputs.pull-request-url }}';

            const message = '${{ steps.check_pr.outputs.exists }}' === 'true'
              ? `üîÑ Updated existing pull request: ${prUrl}`
              : `‚úÖ Created new pull request: ${prUrl}`;

            github.rest.issues.createComment({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
